webpack是一个现代JavaScript应用程序的模块打包器。当webpack处理应用程序时，它会递归地构建一个依赖关系图，其中包含应用程序需要的每一个模块，然后将所有
这些模块打包成少量的bundle，通常只有一个，有浏览器加载。

它是高度可配置的，开始前先理解四个核心概念： 入口（entry）、输出（output）、loader、插件（plugins）。


入口【Entry】
webpack创建应用程序所有的依赖的关系图（dependency graph），图的起点被称之为入口起点（entry point）。入口起点告诉webpack从哪里开始，
并根据依赖关系图确定需要打包的内容。可以将应用程序的入口起点认为是跟上下文（contextual root）或app第一个启动文件。
例如：
webpack.config.js

module.exports = {
  entry: './public/js/entry.js'
};

出口【Output】
将所有的资源（assets）归拢在一起后，还需要告诉webpack在哪里打包应用程序。webpack的output属性描述了如何处理归拢在一起的代码（bundle code）。
例如：
webpack.config.js

const path = require('path');

module.exports = {
  entry: './public/js/entry.js',
  output: {
    path: path.resolve(__dirname, 'dist'),
    filename: 'my-first-webpack.bundle.js'
  }
}

Loader
webpack的目标是，让webpack聚焦于项目中的所有资源（asset），而浏览器不需要关注考虑这些（明确的说，这并不意味着所有资源(asset)都必须打包在一起）。
webpack把每个文件（css，html，js，scss，jpg，etc）都作为模块处理。然而webpack自身只理解JavaScript。
webpack loader在文件被添加到依赖图中时，其转换为模块。
在更高层面，在webpack的配置中loader有两个目标。
1、test属性：识别出应该被对应的loader进行转换的那些文件
2、use属性：转换这些文件，从而使其能够被添加到依赖图中

webpack.config.js

const path = require('path');
const config = {
  entry: './public/js/entry.js',
  output: {
    path: path.resolve(__dirname, 'dist'),
    filename: 'my-first-webpack.bundle.js'
  },
  module: {
    rules: [
      {test: /\.txt$/, use: 'raw-loader'}
    ]
  }
};
module.exports = config;
以上配置中，对一个单独的module对象定义了rules属性，里面包含两个必须属性：test 和 use。
在 webpack 配置中定义loader时，要定义在module.rules中，而不是rules。然而，在定义错误时webpack会给出严重的警告。
为了使你受益于此，如果没有按照正确方式去做，webpack会“给出严重的警告”。

插件【Plugins】
loader仅在每个文件的基础上执行转换，插件更常用语在打包模块的compilation和chunk生命周期执行操作和自定义功能。webpack的插件系统极其强大和可定制化。
使用插件，需要require它，然后把它添加到plugins数组中，多数插件可以通过选项(option)自定义。
webpack.config.js

const HtmlWebpackPlugin = require('html-webpack-plugin');
const webpack = require('webpack');
const path = require('path');
const config = {
  entry: './public/js/entry.js',
  output: {
    path: path.resolve(__dirname, 'dist'),
    filename: 'my-first-webpack.bundle.js'
  },
  module: {
    rules: [
      {test: /\.txt$/, use: 'raw-loader'}
    ]
  },
  plugins: [
    new webpack.optimize.UglifyJsPlugin(),
    new HtmlWebpackPlugin({template: './src/index.html'})
  ]
};
module.exports = config;
